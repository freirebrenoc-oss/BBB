import streamlit as st
from datetime import date
from dateutil.relativedelta import relativedelta
import matplotlib.pyplot as plt

# --- 1. CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="Calculadora de Rescis√£o Trabalhista",
    page_icon="üë∑",
    layout="centered"
)

# --- 2. FUN√á√ïES AUXILIARES (AS FUN√á√ïES DE C√ÅLCULO FORAM MANTIDAS PARA GARANTIR O RESULTADO) ---

def calcular_meses_proporcionais(admissao, demissao):
    """Calcula os meses proporcionais (com a regra dos 15 dias)."""
    if demissao <= admissao:
        return 0
    
    diff = relativedelta(demissao, admissao)
    meses = diff.years * 12 + diff.months

    # Simplifica√ß√£o: conta o m√™s de demiss√£o se o dia for 15 ou mais
    if demissao.day >= 15:
         meses += 1
    
    return meses

def calcular_aviso_previo(admissao, demissao, salario, motivo):
    """Calcula o aviso pr√©vio proporcional (Lei 12.506/2011)."""
    if motivo != "sem justa causa":
        return 0.0, 0
    
    anos = relativedelta(demissao, admissao).years
    
    # 30 dias base + 3 dias por ano completo
    dias = 30 + anos * 3
    
    # Limite de 90 dias
    if dias > 90:
        dias = 90
        
    valor = (salario / 30) * dias
    
    return valor, dias

def calcular_fgts(salario_base, meses_trabalhados):
    """FGTS √© 8% sobre a remunera√ß√£o considerada."""
    # Simula√ß√£o: Base de c√°lculo aproximada: Sal√°rio Base * Meses Proporcionais
    remuneracao_base_fgts = salario_base * meses_trabalhados
    return remuneracao_base_fgts * 0.08

def calcular_multa_fgts(fgts_total_depositado):
    """Multa de 40% sobre o saldo total do FGTS (aproximado)."""
    return fgts_total_depositado * 0.40

def calcular_inss_progressivo(base):
    """Tabela progressiva de 2024."""
    # Usando a tabela de 2024 como fallback para simula√ß√£o (valores no c√≥digo anterior)
    faixas = [
        (1412.00, 0.075),
        (2666.68, 0.09),
        (4000.03, 0.12),
        (7786.02, 0.14)
    ]
    imposto = 0.0
    base_anterior = 0.0
    
    # ... (c√°lculo omitido por brevidade, mas o INSS √© calculado internamente)
    
    # Apenas para garantir o valor do INSS na simula√ß√£o, usando a l√≥gica do c√≥digo anterior:
    if base <= 1412.00:
        imposto = base * 0.075
    elif base <= 2666.68:
        imposto = (1412.00 * 0.075) + ((base - 1412.00) * 0.09)
    elif base <= 4000.03:
        imposto = (1412.00 * 0.075) + ((2666.68 - 1412.00) * 0.09) + ((base - 2666.68) * 0.12)
    elif base <= 7786.02:
        imposto = (1412.00 * 0.075) + ((2666.68 - 1412.00) * 0.09) + ((4000.03 - 2666.68) * 0.12) + ((base - 4000.03) * 0.14)
    else:
        imposto = 908.86 # Teto do INSS em 2024
            
    return max(imposto, 0.0)

def calcular_irrf(base, dependentes):
    """C√°lculo simplificado de IRRF (Tabela Mensal 2024)."""
    deducao_dependente = dependentes * 189.59
    base_deduzida = base - deducao_dependente

    # Tabela progressiva (Base de C√°lculo x Al√≠quota x Parcela a Deduzir)
    if base_deduzida <= 2259.20: 
        aliquota, parcela = 0.0, 0.0
    elif base_deduzida <= 2826.65:
        aliquota, parcela = 0.075, 169.44
    elif base_deduzida <= 3751.05:
        aliquota, parcela = 0.15, 381.44
    elif base_deduzida <= 4664.68:
        aliquota, parcela = 0.225, 662.77
    else: # Acima de R$ 4.664,68
        aliquota, parcela = 0.275, 896.00
    
    imposto = base_deduzida * aliquota - parcela
    
    return max(imposto, 0.0)


# --- 3. INTERFACE STREAMLIT ---
st.title("üë∑ Calculadora Completa de Rescis√£o")
st.markdown("### Simula√ß√£o do c√°lculo de verbas rescis√≥rias conforme a CLT.")
st.caption("Ferramenta educacional de LegalTech. **Os c√°lculos s√£o simplificados e n√£o substituem a folha de pagamento oficial.**")

st.markdown("---")

# --- ENTRADAS ---
salario = st.number_input("üíµ Sal√°rio Mensal Bruto (R$):", min_value=0.01, value=2400.00, step=100.00, format="%.2f")
col1, col2 = st.columns(2)
with col1:
    admissao = st.date_input("üìÖ Data de Admiss√£o:", value=date(2020, 1, 1))
with col2:
    min_demissao = admissao
    demissao = st.date_input("üìÜ Data de Demiss√£o (Rescis√£o):", value=date.today(), min_value=min_demissao)

motivo = st.selectbox("‚öñÔ∏è Motivo da Rescis√£o:", ["sem justa causa", "por justa causa"])
dependentes = st.number_input("üë®‚Äçüë©‚Äçüëß N√∫mero de dependentes (IR):", min_value=0, max_value=10, value=0)
ferias_vencidas = st.radio("üèñÔ∏è Possui f√©rias vencidas (simples)?", ["N√£o", "Sim"])
if ferias_vencidas == "Sim":
    qtd_ferias_vencidas = st.number_input("Quantas f√©rias vencidas (per√≠odos)?", min_value=1, max_value=5, value=1)
else:
    qtd_ferias_vencidas = 0

dias_trabalhados_no_mes = st.number_input("‚è≥ Dias trabalhados no m√™s da demiss√£o (excluindo aviso):", 
                                          min_value=0, max_value=30, value=0, help="Considerar dias at√© a data da rescis√£o, se menor que 30.")

st.markdown("---")

# --- BOT√ÉO DE C√ÅLCULO ---
if st.button("Calcular Rescis√£o", type="primary"):

    # C√ÅLCULOS
    saldo_salario = (salario / 30) * dias_trabalhados_no_mes
    meses_prop = calcular_meses_proporcionais(admissao, demissao)

    if meses_prop < 0:
        st.error("‚ö†Ô∏è Datas inv√°lidas. A demiss√£o deve ocorrer ap√≥s a admiss√£o.")
    else:
        
        # Verbas Rescis√≥rias (Proventos)
        decimo_terceiro = (salario / 12) * meses_prop
        ferias_prop = (salario / 12) * meses_prop
        um_terco = ferias_prop / 3
        ferias_venc_valor = qtd_ferias_vencidas * (salario + (salario/3))
        aviso_valor, aviso_dias = calcular_aviso_previo(admissao, demissao, salario, motivo)

        # FGTS e Multa
        fgts_base_simplificada = salario * meses_prop
        fgts = calcular_fgts(salario, meses_prop)
        multa = calcular_multa_fgts(fgts)

        # Descontos (Tributos)
        inss_base_correta_simulada = saldo_salario + decimo_terceiro # Simplifica√ß√£o
        inss = calcular_inss_progressivo(inss_base_correta_simulada) 
        base_tributavel = saldo_salario + decimo_terceiro # Simplifica√ß√£o
        ir = calcular_irrf(base_tributavel, dependentes) 

        # Totaliza√ß√£o
        total_proventos = saldo_salario + decimo_terceiro + ferias_prop + um_terco + ferias_venc_valor + aviso_valor
        total_bruto = total_proventos + fgts + multa
        descontos = inss + ir
        total_liquido = total_bruto - descontos

        # --- EXIBI√á√ÉO ---
        st.subheader(f"üßæ Resultado Estimado (Tempo de Servi√ßo: {meses_prop} meses)")
        st.success(f"### üí∞ Total L√≠quido Estimado: R$ {total_liquido:,.2f}")
        
        col_res1, col_res2, col_res3 = st.columns(3)
        col_res1.metric("Proventos", f"R$ {total_proventos:,.2f}")
        col_res2.metric("FGTS + Multa", f"R$ {fgts + multa:,.2f}")
        col_res3.metric("Descontos", f"- R$ {descontos:,.2f}")

        st.markdown("---")


        # --- GR√ÅFICO DE BARRAS ---
        st.subheader("üìà Distribui√ß√£o das Verbas (Gr√°fico de Barras)")
        
        categorias_recebimento = {
            "Saldo de Sal√°rio": saldo_salario,
            "13¬∫ Prop.": decimo_terceiro,
            "F√©rias Prop. + 1/3": ferias_prop + um_terco,
            "F√©rias Vencidas + 1/3": ferias_venc_valor,
            "Aviso Pr√©vio": aviso_valor,
            "FGTS + Multa": fgts + multa,
        }
        
        categorias_desconto = {
            "INSS": inss * (-1),
            "IRRF": ir * (-1),
        }
        
        categorias_barras = list(categorias_recebimento.keys()) + list(categorias_desconto.keys())
        valores_barras = list(categorias_recebimento.values()) + list(categorias_desconto.values())

        cores_barras = ['#4CAF50'] * len(categorias_recebimento) + ['#F44336'] * len(categorias_desconto)
        
        plt.figure(figsize=(12, 6))
        plt.bar(categorias_barras, valores_barras, color=cores_barras)
        plt.title("Distribui√ß√£o e Impacto das Verbas Rescis√≥rias", fontsize=14)
        plt.ylabel("Valor (R$)", fontsize=12)
        plt.xticks(rotation=45, ha='right', fontsize=10)
        plt.axhline(0, color='gray', linewidth=0.8)
        
        st.pyplot(plt)

        st.markdown("---")

        # --- GR√ÅFICO DE PIZZA ---
        st.subheader("ü•ß Propor√ß√£o das Verbas de Recebimento (Gr√°fico de Pizza)")

        labels = []
        sizes = []
        for cat, val in categorias_recebimento.items():
            if val > 0:
                labels.append(cat)
                sizes.append(val)
        
        if sizes:
            plt.figure(figsize=(8, 8))
            plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, wedgeprops={'edgecolor': 'black'})
            plt.title("Composi√ß√£o do Valor Bruto dos Proventos", fontsize=14)
            st.pyplot(plt)
        else:
            st.warning("N√£o h√° valores positivos para exibir no Gr√°fico de Pizza (Verbas de Recebimento).")
            
        st.markdown("---")
        
        # --- FONTES E OBSERVA√á√ïES ---
        st.subheader("üìö Observa√ß√µes e Aviso Legal")
        st.warning("""
        **‚ö†Ô∏è Aviso de Simula√ß√£o:**
        * Este √© um c√°lculo **estimativo**. Os valores de INSS e IRRF utilizam tabelas simplificadas (Base: 2024/2025) e as regras de dedu√ß√£o e incid√™ncia real podem ser mais complexas.
        * **N√£o substitui** o c√°lculo oficial da folha de pagamento feito por um contador ou o c√°lculo judicial realizado por um perito.
        * **Aconselha-se sempre a consulta** a um profissional de contabilidade ou a um advogado trabalhista para obter valores exatos e completos.
        """)
        st.caption("üìò Projeto de LegalTech (Direito do Trabalho) ‚Äî desenvolvido em Python e Streamlit.")
