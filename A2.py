# arquivo: calculadora_rescisao.py
import streamlit as st
from datetime import date
from dateutil.relativedelta import relativedelta
import matplotlib.pyplot as plt
import pandas as pd
import io

# --- 1. CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="Calculadora Rescis√≥ria Completa",
    page_icon="üë∑",
    layout="centered"
)

# --- 2. FUN√á√ïES DE C√ÅLCULO (tudo relacionado √† rescis√£o) ---

def calcular_meses_proporcionais(admissao, demissao):
    """Calcula meses proporcionais, com regra dos 15 dias (rescis√£o)."""
    if demissao <= admissao:
        return 0
    diferenca = relativedelta(demissao, admissao)
    meses = diferenca.years * 12 + diferenca.months
    if diferenca.days >= 15:
        meses += 1
    return meses

def calcular_aviso_previo(admissao, demissao, salario):
    """Aviso pr√©vio indenizado: 30 dias + 3 dias por ano completo (rescis√£o)."""
    anos = relativedelta(demissao, admissao).years
    dias = 30 + (anos * 3)
    return (salario / 30) * dias

def calcular_fgts(salario, meses):
    """FGTS relativo aos meses trabalhados (8%). Em rescis√£o, mostramos o saldo acumulado."""
    return salario * 0.08 * meses

def calcular_multa_fgts(fgts):
    """Multa rescis√≥ria de 40% sobre o FGTS (rescis√£o sem justa causa)."""
    return fgts * 0.40

def calcular_inss_progressivo(valor_base):
    """
    Calcula INSS de forma progressiva (tabela por faixas).
    Usamos como base as verbas salariais tribut√°veis na rescis√£o.
    """
    faixas = [
        (1412.00, 0.075),
        (2666.68, 0.09),
        (4000.03, 0.12),
        (7786.02, 0.14)
    ]
    imposto = 0.0
    base_anterior = 0.0

    for limite, aliquota in faixas:
        if valor_base > limite:
            imposto += (limite - base_anterior) * aliquota
            base_anterior = limite
        else:
            imposto += (valor_base - base_anterior) * aliquota
            break
    return max(imposto, 0.0)

def calcular_ir_rescisao(base_ir):
    """
    Calcula IRRF sobre as verbas tribut√°veis da rescis√£o (13¬∫, f√©rias +1/3 e aviso indenizado).
    Retorna (valor_ir, aliquota_usada_em_percent).
    As dedu√ß√µes/parcelas seguem a tabela progressiva (ex.: Parcela a deduzir).
    """
    if base_ir <= 2112.00:
        aliquota, deducao = 0.0, 0.0
    elif base_ir <= 2826.65:
        aliquota, deducao = 0.075, 158.40
    elif base_ir <= 3751.05:
        aliquota, deducao = 0.15, 370.40
    elif base_ir <= 4664.68:
        aliquota, deducao = 0.225, 651.73
    else:
        aliquota, deducao = 0.275, 884.96

    imposto = (base_ir * aliquota) - deducao
    return max(imposto, 0.0), aliquota * 100

# --- 3. INTERFACE (tudo sobre rescis√£o) ---
st.title("üë∑ Calculadora Completa de Rescis√£o Trabalhista")
st.markdown("C√°lculo de verbas rescis√≥rias: **13¬∫ proporcional, f√©rias +1/3, aviso pr√©vio, FGTS, multa do FGTS, INSS e IRRF**.")
st.caption("Observa√ß√£o: simplifica√ß√£o para casos t√≠picos de rescis√£o sem justa causa. Ajustes podem ser necess√°rios para situa√ß√µes espec√≠ficas.")

st.markdown("---")

# Entradas
salario_base = st.number_input("üí∞ Sal√°rio Mensal Bruto (R$):", min_value=0.01, value=2000.00, step=50.00, format="%.2f")
col_adm, col_dem = st.columns(2)
with col_adm:
    data_admissao = st.date_input("üìÖ Data de Admiss√£o:", value=date(2023, 1, 1))
with col_dem:
    data_demissao = st.date_input("üìÜ Data de Demiss√£o:", value=date.today(), min_value=data_admissao)

# Bot√£o de c√°lculo
st.markdown("---")
if st.button("Calcular Rescis√£o", type="primary"):
    meses_trabalhados = calcular_meses_proporcionais(data_admissao, data_demissao)

    if meses_trabalhados <= 0:
        st.error("‚ùå Verifique as datas: a demiss√£o deve ser posterior √† admiss√£o.")
    else:
        # --- Verbas rescis√≥rias (tudo sobre rescis√£o) ---
        decimo_prop = (salario_base / 12) * meses_trabalhados
        ferias_prop = (salario_base / 12) * meses_trabalhados
        terco = ferias_prop / 3
        ferias_total = ferias_prop + terco
        aviso = calcular_aviso_previo(data_admissao, data_demissao, salario_base)

        # FGTS e multa (n√£o entram na base de IR)
        fgts_saldo = calcular_fgts(salario_base, meses_trabalhados)
        multa_fgts = calcular_multa_fgts(fgts_saldo)

        # Base do IR e INSS = somente verbas tribut√°veis (13¬∫, f√©rias+1/3, aviso)
        base_tributavel = decimo_prop + ferias_total + aviso

        # C√°lculo IR e INSS (aplicados sobre a base correta)
        ir_valor, ir_aliquota_pct = calcular_ir_rescisao(base_tributavel)
        inss_valor = calcular_inss_progressivo(base_tributavel)

        # Totais
        total_bruto_rescisao = decimo_prop + ferias_total + aviso + fgts_saldo + multa_fgts
        total_descontos = ir_valor + inss_valor
        total_liquido = total_bruto_rescisao - total_descontos

        # --- Exibi√ß√£o ---
        st.subheader(f"üßæ Resultado (Meses considerados: {meses_trabalhados})")
        st.success(f"**Total L√≠quido Estimado (rescis√£o): R$ {total_liquido:,.2f}**")
        st.markdown("---")

        st.markdown("### Detalhamento (tudo referente √† rescis√£o)")
        st.write(f"‚Ä¢ 13¬∫ Sal√°rio Proporcional: R$ {decimo_prop:,.2f}")
        st.write(f"‚Ä¢ F√©rias Proporcionais: R$ {ferias_prop:,.2f}")
        st.write(f"‚Ä¢ 1/3 Constitucional sobre F√©rias: R$ {terco:,.2f}")
        st.write(f"‚Ä¢ Total de F√©rias (+1/3): R$ {ferias_total:,.2f}")
        st.write(f"‚Ä¢ Aviso Pr√©vio Indenizado: R$ {aviso:,.2f}")
        st.write(f"‚Ä¢ FGTS (8% sobre remunera√ß√µes consideradas): R$ {fgts_saldo:,.2f}")
        st.write(f"‚Ä¢ Multa de 40% sobre FGTS: R$ {multa_fgts:,.2f}")
        st.markdown("---")
        st.write(f"‚Ä¢ Base Tribut√°vel (13¬∫ + F√©rias + Aviso): R$ {base_tributavel:,.2f}")
        st.write(f"‚Ä¢ INSS (progressivo sobre base tribut√°vel): R$ {inss_valor:,.2f}")
        st.write(f"‚Ä¢ IRRF (al√≠quota aplicada: {ir_aliquota_pct:.1f}%): R$ {ir_valor:,.2f}")
        st.markdown("---")
        st.write(f"**Total Bruto (todas as verbas): R$ {total_bruto_rescisao:,.2f}**")
        st.write(f"**Total Descontos (INSS + IR): R$ {total_descontos:,.2f}**")
        st.write(f"**Total L√≠quido Estimado (ap√≥s descontos): R$ {total_liquido:,.2f}**")

        # --- Gr√°fico de barras (verbas rescis√≥rias) ---
        categorias = ['13¬∫ Prop.', 'F√©rias Prop.', '1/3 F√©rias', 'Aviso', 'FGTS', 'Multa FGTS', 'INSS', 'IR']
        valores = [decimo_prop, ferias_prop, terco, aviso, fgts_saldo, multa_fgts, inss_valor, ir_valor]

        plt.figure(figsize=(9,5))
        plt.bar(categorias, valores)
        plt.title('Distribui√ß√£o das Verbas na Rescis√£o')
        plt.xlabel('Verbas')
        plt.ylabel('Valor (R$)')
        plt.xticks(rotation=30)
        st.pyplot(plt, use_container_width=True)

        # --- Gr√°fico pizza (percentual sobre o total bruto) ---
        # Evita divis√£o por zero
        total_for_pct = sum([abs(v) for v in valores]) or 1
        porcentagens = [v / total_for_pct * 100 for v in valores]

        plt.figure(figsize=(6,6))
        plt.pie(porcentagens, labels=categorias, autopct='%1.1f%%', startangle=90)
        plt.title('Percentual de Cada Verba (rescis√£o)')
        st.pyplot(plt, use_container_width=True)

        st.markdown("---")
        st.info("‚ö†Ô∏è Aten√ß√£o: este c√°lculo √© uma simplifica√ß√£o para casos t√≠picos de rescis√£o sem justa causa. Ajustes podem ser necess√°rios (ex.: aviso trabalhado, f√©rias vencidas/indenizadas, dependentes, dedu√ß√µes legais espec√≠ficas, parcelamentos etc.).")

        # --- Exportar resultados (CSV) ---
        df = pd.DataFrame({
            "Item": categorias + ["Total Bruto", "Total Descontos", "Total L√≠quido"],
            "Valor (R$)": valores + [total_bruto_rescisao, total_descontos, total_liquido]
        })

        csv = df.to_csv(index=False).encode('utf-8')
        st.download_button("‚¨áÔ∏è Baixar resumo da rescis√£o (CSV)", data=csv, file_name="rescisao_resumo.csv", mime="text/csv")

        # --- Fontes e observa√ß√µes finais (rescis√£o) ---
        st.markdown("### Fontes / Observa√ß√µes")
        st.markdown("- C√°lculos baseados em regras gerais da CLT e nas al√≠quotas progressivas de INSS e IR (tabelas usuais).")
        st.markdown("- FGTS e multa de 40% s√£o apresentados mas **n√£o comp√µem** a base de c√°lculo do IR/INSS (situa√ß√£o padr√£o).")
        st.markdown("- Verifique situa√ß√µes espec√≠ficas com orientador jur√≠dico/cont√°bil quando houver d√∫vidas (aviso trabalhado, descontos legais, acordos).")
